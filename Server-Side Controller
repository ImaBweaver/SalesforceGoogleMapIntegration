public class GoogleMapsController {

    @AuraEnabled
    public static List<Location> getLocationList(String recordId)  {
        List<Opportunity> opps = [Select Id, Site_Address_Line_1__c, City__c, State__c, Zip_Code__c, Site_Name__c FROM Opportunity WHERE Id =: recordId];
        List<Location> loc = new List<Location>();
        List<Decimal> siteDetails = new List<Decimal>();
        List<Decimal> siteDetails2 = new List<Decimal>();
        List<Decimal> siteDetails3 = new List<Decimal>();
        List<Sites__c> siteRecords = new List<Sites__c>();
        Boolean newCoordinates = false;
        for(Opportunity opp :opps){
            String SiteInfo = String.ValueOf([SELECT Name, Distance_from_Office__c, Travel_Time_from_Office_Mins__c FROM Sites__c WHERE Id =: opp.Site_Name__c]);  
            String SiteName = SiteInfo.substringBetween('=', ',');
			system.debug(SiteName);
            String distanceFromTech = '';
            String travelTime = '';
            String origlat1 = '';
            String origlong1 = '';
            String distanceFromTech2 = '';
            String travelTime2 = '';
            String origlat2 = '';
            String origlong2 = '';
            String distanceFromTech3 = '';
            String travelTime3 = '';
            String origlat3 = '';
            String origlong3 = '';
           
                String sitelat = String.ValueOf(Database.query('Select Geo_Location__latitude__s From Sites__c Where Name =: SiteName'));
                sitelat = sitelat.substringBetween('=', ',');
                System.debug(sitelat);
                String sitelong = String.ValueOf(Database.query('Select Geo_Location__longitude__s From Sites__c Where Name =: SiteName'));
                String siteId = sitelong.substringBetween('Id=', '}');
                sitelong = sitelong.substringBetween('=', ',');
                System.debug(sitelong);
                
                siteRecords = [SELECT Id FROM Sites__c WHERE Id =: siteId];
                
                if(sitelat == null && sitelong == null){
                    system.debug('Missing coordinates');
                    List<Double> GeoCoordinates = new List<Double>();
                    GeoCoordinates = getSiteCoordinates(siteId);
                    sitelat = String.valueOf(GeoCoordinates[0]);
                    sitelong = String.valueOf(GeoCoordinates[1]);
                    
                    siteRecords = [SELECT Id FROM Sites__c WHERE Id =: siteId];

					for (Sites__C siteRecord : siteRecords)
                    {
                        siteRecord.Geo_Location__latitude__s = GeoCoordinates[0];
                        siteRecord.Geo_Location__longitude__s = GeoCoordinates[1];
                    }
                    newCoordinates = true;
                                         
                }           	
            
            	List<Contact> Techs = [Select Id, MailingLatitude, MailingLongitude, MailingStreet, MailingCity, MailingState, MailingPostalCode FROM Contact WHERE Technician__c = TRUE AND ML_Employee__c = TRUE];
            	System.debug(Techs);
            	String nearestTech = '';
            	String techTitle = '';
            	Double Distance1 = 1000000000;
            	Double Distance2 = 1000000001;
           		Double Distance3 = 1000000002;
            	String Tech1Id = '';
            	GeoLocation geoInfo2 = new GeoLocation(); //Nearest Technician
            	Location LocDetail2 = new Location();
            	String Tech2Id = '';
            	GeoLocation geoInfo3 = new GeoLocation(); //Second Nearest Technician
            	Location LocDetail3 = new Location();
            	String Tech3Id = '';
            	GeoLocation geoInfo4 = new GeoLocation(); //Third Nearest Technician
            	Location LocDetail4 = new Location();
            
            	for(Contact Tech :Techs){
                    Decimal decSiteLat = decimal.valueOf(sitelat);
                    Decimal decSiteLong = decimal.valueOf(sitelong);
					Double radius = 6371.00;
    				Double dLat = toRadians(decSiteLat-Tech.MailingLatitude);
    				Double dLon = toRadians(decSiteLong-Tech.MailingLongitude);
    				Double a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(toRadians(Tech.MailingLatitude)) * Math.cos(toRadians(decSiteLat)) * Math.sin(dLon/2) * Math.sin(dLon/2);
   					Double c = 2 * Math.asin(Math.sqrt(a));

   				 	double kmToMiles = 0.621371;
     				radius = radius * c * kmToMiles;
                    
                    if (radius <= Distance1){
                        Distance3 = Distance2;
                        Distance2 = Distance1;
                        Distance1 = radius;
                        origlat3 = origlat2;
                        origlong3 = origlong2;
                        origlat2 = origlat1;
                        origlong2 = origlong1;
                        origlat1 = string.valueOf(Tech.MailingLatitude);
                        origlong1 = string.valueOf(Tech.MailingLongitude);
                        Tech3Id=Tech2Id;
                        Tech2Id=Tech1Id;
                        Tech1Id=Tech.Id;      
                    }
                    
                    if (radius <= Distance2 && radius > Distance1){
                        Distance3 = Distance2;
                        Distance2 = radius;
                        origlat3 = origlat2;
                        origlong3 = origlong2;
                        origlat2 = string.valueOf(Tech.MailingLatitude);
                        origlong2 = string.valueOf(Tech.MailingLongitude);
                        Tech3Id=Tech2Id;
                        Tech2Id=Tech.Id;                                                                                                         
                    }
                    
                    if (radius <= Distance3 && radius > Distance1 && radius > Distance2){
                        Distance3 = radius;
                        origlat3 = string.valueOf(Tech.MailingLatitude);
                        origlong3 = string.valueOf(Tech.MailingLongitude);
                        Tech3Id=Tech.Id;                       
                    }                    
                }
            
            	system.debug('origlat1: ' + origlat1 + ' | origlong1: ' + origlong1);
                siteDetails = getPiklistValues(origlat1, origlong1, sitelat, sitelong);
            	system.debug('origlat2: ' + origlat2 + ' | origlong2: ' + origlong2);
            	siteDetails2 = getPiklistValues(origlat2, origlong2, sitelat, sitelong);
            	system.debug('origlat3: ' + origlat3 + ' | origlong3: ' + origlong3);
            	siteDetails3 = getPiklistValues(origlat3, origlong3, sitelat, sitelong); 
                                
                system.debug('Site Details: ' + siteDetails);
            	system.debug('Site Details2: ' + siteDetails2);
            	system.debug('Site Details3: ' + siteDetails3);
                                
                distanceFromTech = String.valueOf(siteDetails[0]);
                travelTime = String.valueOf(siteDetails[1]);
            
            	distanceFromTech2 = String.valueOf(siteDetails2[0]);
                travelTime2 = String.valueOf(siteDetails2[1]);
            
            	distanceFromTech3 = String.valueOf(siteDetails3[0]);
                travelTime3 = String.valueOf(siteDetails3[1]);
            
            
            Integer intDistFromOffice = Integer.valueOf(Double.valueOf(distanceFromTech));
            Integer intDistFromOffice2 = Integer.valueOf(Double.valueOf(distanceFromTech2));
            Integer intDistFromOffice3 = Integer.valueOf(Double.valueOf(distanceFromTech3));
            
            GeoLocation geoInfo = new GeoLocation();
            geoInfo.Street = opp.Site_Address_Line_1__c;
            geoInfo.PostalCode = opp.Zip_Code__c;
            geoInfo.City = opp.City__c;
            geoInfo.State = opp.State__c;
            Location LocDetail = new Location();
            locDetail.Location = geoInfo;
            locDetail.title = SiteName;
            
            Decimal decTravelTime = Decimal.valueOf(travelTime);
            Decimal decTravelTime2 = Decimal.valueOf(travelTime2);
            Decimal decTravelTime3 = Decimal.valueOf(travelTime3);
            
            system.debug('Tech1Id: ' + Tech1Id);
            
            Contact Tech1 = [Select Full_Name__c, Title, Market__c, MailingStreet, MailingCity, MailingState, MailingPostalCode FROM Contact WHERE Id =: Tech1Id LIMIT 1];
            
            if(decTravelTime>=60){
               Integer intTravelTime = Integer.valueOf(travelTime);
               Integer divisor = 60;
               Integer hours = intTravelTime/divisor;
               Integer minutes = math.mod(intTravelTime, divisor);
               locDetail.description = '<hr/>Nearest Tech: ' + Tech1.Full_Name__c+ '<br/>Distance Away ' + '<b>' + intDistFromOffice + ' mi</b>' + '<br/>' + 'Travel Time: ' + '<b>' + hours + ' hours ' + minutes + ' min</b>'; 
            }
            
            else{
                locDetail.description = '<hr/>Nearest Tech: ' + Tech1.Full_Name__c + '<br/>Distance Away: ' + '<b>' + intDistFromOffice + ' mi</b>' + '<br/>' + 'Travel Time: ' + '<b>' + travelTime + ' min</b>';
            }
                        
            loc.add(locDetail);
            
            if(Tech1Id != ''){           
            	geoInfo2.Street = Tech1.MailingStreet;
            	geoInfo2.PostalCode = Tech1.MailingPostalCode;
            	geoInfo2.City = Tech1.MailingCity;
            	geoInfo2.State = Tech1.MailingState;
            	locDetail2.Location = geoInfo2;
            	locDetail2.title = Tech1.Full_Name__c;
                if(decTravelTime>=60){
                    Integer intTravelTime1 = Integer.valueOf(travelTime);
                    Integer divisor1 = 60;
                    Integer hours1 = intTravelTime1/divisor1;
                    Integer minutes1 = math.mod(intTravelTime1, divisor1);
                    locDetail2.description = '<hr/>Title: '+ '<b>' +Tech1.Title + '</b>' + '<br/>Market: '+ Tech1.Market__c + '<br/>Distance to Site: ' + intDistFromOffice + ' mi' + '<br/>Travel Time: ' + hours1 + ' hours ' + minutes1 + ' min';
                }
                else{
                    locDetail2.description = '<hr/>Title: '+ '<b>' +Tech1.Title + '</b>' + '<br/>Market: '+ Tech1.Market__c  + '<br/>Distance to Site: ' + intDistFromOffice + ' mi' + '<br/>Travel Time: ' + travelTime + ' min';    
                }
             
             loc.add(locDetail2);  
            }
            
            if(Tech2Id != ''){
              Contact Tech2 = [Select Full_Name__c, Title, Market__c, MailingStreet, MailingCity, MailingState, MailingPostalCode FROM Contact WHERE Id =: Tech2Id LIMIT 1];
                
                geoInfo3.Street = Tech2.MailingStreet;
            	geoInfo3.PostalCode = Tech2.MailingPostalCode;
            	geoInfo3.City = Tech2.MailingCity;
            	geoInfo3.State = Tech2.MailingState;
            	locDetail3.Location = geoInfo3;
            	locDetail3.title = Tech2.Full_Name__c;
                if(decTravelTime2>=60){
                    Integer intTravelTime2 = Integer.valueOf(travelTime2);
                    Integer divisor2 = 60;
                    Integer hours2 = intTravelTime2/divisor2;
                    Integer minutes2 = math.mod(intTravelTime2, divisor2);
                    locDetail3.description = '<hr/>Title: '+ '<b>' +Tech2.Title + '</b>' + '<br/>Market: '+  Tech2.Market__c +  '<br/>Distance to Site: ' + intDistFromOffice2 + ' mi' + '<br/>Travel Time: ' + hours2 + ' hours ' + minutes2 + ' min';
                }
                else{
                    locDetail3.description = '<hr/>Title: '+ '<b>' +Tech2.Title + '</b>' + '<br/>Market: '+ Tech2.Market__c +  '<br/>Distance to Site: ' + intDistFromOffice2 + ' mi' + '<br/>Travel Time: ' + travelTime2 + ' min';    
                }
                
              loc.add(locDetail3);  
            }
            
            if(Tech3Id != ''){
              Contact Tech3 = [Select Full_Name__c, Title, Market__c, MailingStreet, MailingCity, MailingState, MailingPostalCode FROM Contact WHERE Id =: Tech3Id LIMIT 1];
                
                geoInfo4.Street = Tech3.MailingStreet;
            	geoInfo4.PostalCode = Tech3.MailingPostalCode;
            	geoInfo4.City = Tech3.MailingCity;
            	geoInfo4.State = Tech3.MailingState;
            	locDetail4.Location = geoInfo4;
            	locDetail4.title = Tech3.Full_Name__c;
                if(decTravelTime3>=60){
                    Integer intTravelTime3 = Integer.valueOf(travelTime3);
                    Integer divisor3 = 60;
                    Integer hours3 = intTravelTime3/divisor3;
                    Integer minutes3 = math.mod(intTravelTime3, divisor3);
                    locDetail4.description = '<hr/>Title: '+ '<b>' +Tech3.Title + '</b>' + '<br/>Market: ' + Tech3.Market__c + '<br/>Distance to Site: ' + intDistFromOffice3 + ' mi' + '<br/>Travel Time: ' + hours3 + ' hours ' + minutes3 + ' min';
                }
                else{
                    locDetail4.description = '<hr/>Title: '+ '<b>' +Tech3.Title + '</b>' + '<br/>Market: ' + Tech3.Market__c + '<br/>Distance to Site: ' + intDistFromOffice3 + ' mi' + '<br/>Travel Time: ' + travelTime3 + ' min';    
                }
                
              loc.add(locDetail4); 
            }
        }
         
       if(newCoordinates == true){
            			update siteRecords;
       }   
        
        return loc;
    }
    
	public class Location{
        @AuraEnabled 
        public String icon{get;set;} 
        @AuraEnabled 
        public String title{get;set;} 
        @AuraEnabled
        public String description{get;set;} 
        @AuraEnabled 
        public GeoLocation location{get;set;} 
    }
    public class GeoLocation{
        @AuraEnabled 
        public String Street{get;set;}
        @AuraEnabled 
        public String PostalCode{get;set;}
        @AuraEnabled 
        public String City{get;set;}
        @AuraEnabled 
        public String State{get;set;}
    }
    
     @AuraEnabled
     public static List <Decimal> getPiklistValues( String origlat, String origlong, String DestLat, String DestLong ){
     HttpRequest req = new HttpRequest();
     req.setEndpoint('https://maps.googleapis.com/maps/api/directions/json?origin='
     + origlat + ',' + origlong +  //Latitude and Longitude of nearest Tech
     '&destination=' +
     DestLat + ',' + DestLong +  //Latitude and Longitude of the Site
     '&key=AIzaSyCkaM4OPJyUJXhB9T_d-u7OVSxddbEW_e8');
     req.setMethod('GET');
     
         
     Http http = new Http();
     HTTPResponse response = http.send(req);
     System.debug(response.getBody());
	 String JSONResponse = response.getBody();
	 System.debug(JSONResponse);
	 String DistanceString = JSONResponse.substringAfter('"text" : "');
	 DistanceString = DistanceString.substringBefore(' mi');
     DistanceString = DistanceString.remove(',');
	 System.debug(DistanceString);
	 Decimal Distance = decimal.valueOf(DistanceString);

	 String TimeString = JSONResponse.substringAfter('"duration" :');
         
         
	 TimeString = Timestring.substringAfter('"text" : "');
	 TimeString = Timestring.substringBefore(' mins');
     Decimal TravelTime = 0.0;
     System.debug(TimeString);
         if(TimeString.contains('hours') == true){
             Decimal hours = decimal.valueOf(TimeString.substringBefore(' hours'));
             Decimal minutes = decimal.valueOf(TimeString.substringAfter('hours '));
             TravelTime = 60*hours + minutes;         
         }
         
         else{
             TravelTime = decimal.valueOf(TimeString);
         }
         
	 

	 System.debug('Distance Decimal: ' + Distance + ' Time Decimal: ' + TravelTime);
         
     List<Decimal> returnList = new List<Decimal>();
     
     returnList.add(Distance);
     returnList.add(TravelTime);
         
     return returnList;
    
 }
    
    @AuraEnabled
    public static List<Double> getSiteCoordinates(String recordId) {
        
    System.debug(recordId);
    String SiteInfo = String.ValueOf([SELECT Site_Street_Address__c, Site_City__c, Site_State__c, Site_Zip_Code__c FROM Sites__c WHERE Id =: recordId]);
    System.debug(SiteInfo);
	String streetAddress = SiteInfo.substringBetween('Site_Street_Address__c=',', Site_City__c=');
	streetAddress = streetAddress.replace(' ','_');
	System.debug(streetAddress);
	String siteCity = SiteInfo.substringBetween('Site_City__c=',', Site_State__c=');
	siteCity = siteCity.replace(' ','_');
	System.debug(siteCity);
	String siteState = SiteInfo.substringBetween('Site_State__c=',', Site_Zip_Code__c=');
	siteState = siteState.replace(' ','_');
	System.debug(siteState);
	String siteZip = SiteInfo.substringBetween('Site_Zip_Code__c=',', Id=');
	siteZip = siteZip.replace(' ','_');
	System.debug(siteZip);
	
    List<Double> siteDetails = new List<Double>();
    System.debug(siteDetails);
    siteDetails = getsecondPiklistValues( streetAddress, siteCity, siteState, siteZip );
	
    return siteDetails;
        
    }
    
    @AuraEnabled
    public static List <Double> getsecondPiklistValues( String streetAddress, String siteCity, String siteState, String siteZip ){
        
    HttpRequest req = new HttpRequest();
	req.setEndpoint('https://maps.googleapis.com/maps/api/geocode/json?address='+                  
                    streetAddress+'_'+
                    siteCity+'_'+
                    siteState+'_'+
                    siteZip+'_'+
                    '&key=AIzaSyCkaM4OPJyUJXhB9T_d-u7OVSxddbEW_e8');

    req.setMethod('GET');         
    Http http = new Http();
    HTTPResponse response = http.send(req);
	String JSONResponse = response.getBody();
	System.debug(JSONResponse);
	String lat = JSONResponse.substringBetween('lat" : ',',');
	System.debug(lat);
	String lng = JSONResponse.substringBetween('lng" : ', '}');
	System.debug(lng);

	Double decLat = Double.valueOf(lat);
	Double decLng = Double.valueOf(lng);
        
    List<Double> returnList = new List<Double>();
    returnList.add(decLat);
    returnList.add(decLng);
    System.debug(returnList);    
        
    return returnList;
        
    }
    
    public static Double toRadians(Decimal degree){
    	return degree * 3.1415926 / 180;
	}
}
